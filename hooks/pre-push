#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

z40=0000000000000000000000000000000000000000

while read local_ref local_sha remote_ref remote_sha
do
	working_copy_sha=`git rev-parse HEAD`

	# DEBUG
	# echo local_ref=$local_ref
	# echo local_sha=$local_sha
	# echo remote_ref=$remote_ref
	# echo remote_sha=$remote_sha
	# echo working_copy_sha=$working_copy_sha

	if [ "$local_sha" = $z40 ]
	then
		# Handle delete
		:
	else
		if [ "$working_copy_sha" = "$local_sha" ]
		then
			if [ "$SKIP_JS_LINT" = "true" ]
			then
				echo Skipping JS lint since SKIP_JS_LINT=true
			else
				echo Running JS lint on current working copy before pushing code
				echo You can skip this by setting the environment variable SKIP_JS_LINT=true

				pushd frontend-ui-db
				npm run lint
				exit $?
			fi
		fi

		# if [ "$remote_sha" = $z40 ]
		# then
		# 	New branch, examine all commits
		# 	range="$local_sha"
		# else
		# 	Update to existing branch, examine new commits
		# 	range="$remote_sha..$local_sha"
		# fi

		# Check for WIP commit
		# commit=`git rev-list -n 1 --grep '^WIP' "$range"`
		# if [ -n "$commit" ]
		# then
		# 	echo >&2 "Found WIP commit in $local_ref, not pushing"
		# 	exit 1
		# fi
	fi
done

exit 0
